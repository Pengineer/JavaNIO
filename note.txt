一、 简介
	Java NIO即Java New IO，或则称之为非阻塞式I/O，Sun 官方标榜的特性如下：
	（1）为所有的原始类型提供(Buffer)缓存支持。
	（2）字符集编码解码解决方案。 
	（3）Channel ：一个新的原始I/O 抽象。 
	（4）支持锁和内存映射文件的文件访问接口。
	（5）提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O。
	对应的三个package分别为java.nio.buffer（定义了缓冲区类）、java.nio.charset（定义了字符集API）、java.nio.channels（定义了信道和选择器
API），后两者提供了默认的实现类，均有对应的spi包（服务提供程序接口）。

二、 java NIO和阻塞I/O的区别
	（1）Java标准IO是以流的方式处理数据，系统一次一个字节地处理数据，一个输入流产生一个字节的数据，一个输出流消费一个字节的数据，面向流的I/O速度
非常慢；而NIO以块的方式处理数据，每一个操作在一步中产生或者消费一个数据库，按块处理要比按字节处理数据快的多。
	（2）Java标准IO流是线程堵塞和同步的，也就是说如果一个线程调用了read()或write()方法，这个线程在读写操作执行完毕前都是堵塞的。缺点是：
		a.当客户端多时，会创建大量的处理线程。且每个线程都要占用栈空间和一些CPU时间
		b.阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的。
		Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。
线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel），但是数据转换和处理会
比标准IO复杂和更消耗资源一些。
	如果你需要管理数千个并发的连接，每一个连接只发送较少的数据（比如聊天服务器），使用NIO来实现会比较有优势（使用多线程，但是每个线程管理可以管理多个通道）。
	如果你需要同时保持很多到其他服务器的连接，比如P2P网络，使用单线程来管理所有的出口连接会比较有优势。
	如果你有较少的连接但是需要发送大量数据、占用大量贷款，用标准IO来实现会比较合适。
	（3）Java标准IO采用的单向流的数据传输方式，而Java NIO采用的双向通道进行数据的传输。

